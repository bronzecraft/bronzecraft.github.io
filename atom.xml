<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bronzecraft.github.io</id>
    <title>迷藏</title>
    <updated>2021-06-01T15:28:27.920Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bronzecraft.github.io"/>
    <link rel="self" href="https://bronzecraft.github.io/atom.xml"/>
    <subtitle>一个宇宙尽头的餐馆门口保安的闲言碎语</subtitle>
    <logo>https://bronzecraft.github.io/images/avatar.png</logo>
    <icon>https://bronzecraft.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 迷藏</rights>
    <entry>
        <title type="html"><![CDATA[FEM example using Smath]]></title>
        <id>https://bronzecraft.github.io/post/Cq5XQFL-H/</id>
        <link href="https://bronzecraft.github.io/post/Cq5XQFL-H/">
        </link>
        <updated>2021-06-01T15:23:29.000Z</updated>
        <content type="html"><![CDATA[<p>一个小例子，计算二阶四边形单元应力：<br>
<img src="https://bronzecraft.github.io/post-images/1622561234228.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlowChart with Markdown]]></title>
        <id>https://bronzecraft.github.io/post/wod9cC9gH/</id>
        <link href="https://bronzecraft.github.io/post/wod9cC9gH/">
        </link>
        <updated>2021-05-23T14:52:56.000Z</updated>
        <content type="html"><![CDATA[<p>   This a flowchart write with markdown Mermaid:</p>
<pre><code>graph TD
    A1[Monitor] --&gt; B1{Singal Recieved} --&gt;|Yes|C1{Singnal procesing}
    --&gt; D1{Monitor task}
    style D1 fill:#f9f
    style E1 fill:#f96
    
    C1 --&gt; E1[Cancell task]
    B1--&gt;|No|A1
    D1 --&gt;F1[Return Result]
    E1 --&gt;F1
    F1 --&gt;A1


    A2[Monitor] --&gt;B2{Singal Recieved} --&gt;|Yes|C2{Read json file}
     --&gt;|Yes|D2{Transfer file} --&gt;|Yes|E2[Generate task ]
     --&gt;F2[/Generate task waiting list/]
     style F2 fill:#f96
     style E2 fill:#f9f

    B2--&gt;|No|A2
    C2 --&gt;|No|G2[Return error] --&gt;A2
    D2 --&gt;|No|G2
    G2--&gt; A2
    F2 --&gt;A2

    A3[Monitor ] --&gt; B3{Task waiting list Reieved} --&gt; |Yes|C3[Recieved Taks]
    --&gt;D3[Generate Task Run bat] --&gt; E3{singnal} 
    --&gt;|Yes|F3[exec command] --&gt;E3
    style B3 fill:#f96
    F3 --&gt;G3{Task Status} --&gt;|No|E3
    G3 --&gt;|Yes|H3[Return Result] --&gt;A3
    B3--&gt;|No|I3{Time check} --&gt;|Yes|J3[Send Email]
    I3--&gt;|No|A3
    J3 --&gt;A3
    E3 --&gt;|No|G3

    A4{Time Statue} --&gt;|Yes|B4[Recieved Folder list]  --&gt;C4{File time statue Check}
    --&gt;|Yes|D4[File Delete] --&gt;E4[/Return Reslt/]
    C4 --&gt;|No|A4
    A4 --&gt;|No|A4
    E4 --&gt;A4

    A4{Time Statue} --&gt;|Yes: Case1|B4[Recieved Folder list] --&gt;C4{File time statue Check}
    --&gt;|Yes|D4[File Delete] --&gt;E4[/Return Reslt/]
    C4 --&gt;|No|A4
    A4 --&gt;|No|A4
    E4 --&gt;A4
    A4 --&gt;|Yes: Case2|F4{Storage Space Check} --&gt;|Yes|G4[Send Email] --&gt;A4
    F4--&gt;|No| A4
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[psutil库杀死派生进程]]></title>
        <id>https://bronzecraft.github.io/post/CA0ob1nL4/</id>
        <link href="https://bronzecraft.github.io/post/CA0ob1nL4/">
        </link>
        <updated>2021-03-07T05:12:54.000Z</updated>
        <content type="html"><![CDATA[<p>  研究了下python的psutil库，发现里面提供了一个杀死进程树的方法，记录下：</p>
<pre><code>import os
import signal
import psutil

def kill_proc_tree(pid, sig=signal.SIGTERM, include_parent=True,
                   timeout=None, on_terminate=None):
    &quot;&quot;&quot;Kill a process tree (including grandchildren) with signal
    &quot;sig&quot; and return a (gone, still_alive) tuple.
    &quot;on_terminate&quot;, if specified, is a callback function which is
    called as soon as a child terminates.
    &quot;&quot;&quot;
    assert pid != os.getpid(), &quot;won't kill myself&quot;
    parent = psutil.Process(pid)
    children = parent.children(recursive=True)
    if include_parent:
        children.append(parent)
    for p in children:
        try:
            p.send_signal(sig)
        except psutil.NoSuchProcess:
            pass
    gone, alive = psutil.wait_procs(children, timeout=timeout,
                                    callback=on_terminate)
    return (gone, alive)
    
</code></pre>
<p>  顺便记录下psutil库windows系统下的常用命令：<br>
<strong>psutil.cpu_percent(interval=None, percpu=False)</strong>: 获取某进程在某段时间的cpu使用率，返回值为浮点数。<br>
<strong>psutil.cpu_times(percpu=False)</strong> ：获取cpu消耗的时间，返回值为tuple。user：用户模式下的时间。system：内核模式下的时间。idle：杂项时间。interrupt：硬件中断维护花费的时间。dpc： time spent servicing deferred procedure calls (DPCs); DPCs are interrupts that run at a lower priority than standard interrupts.（此处未看懂）。<br>
<strong>psutil.cpu_times_percent(interval=None, percpu=False)</strong>: 和**psutil.cpu_times(percpu=False)**一样，只不过采用百分比形式展示结果。<br>
<strong>psutil.cpu_count(logical=True)</strong>：获取系统cpu的逻辑核数。logical=False即获取cpu的物理核数。<br>
<strong>psutil.cpu_stats()</strong>：返回cpu的各项数据。<br>
<strong>psutil.cpu_freq(percpu=False)</strong>：返回cpu的频率，包括当前频率，最小和最大频率。单位为MHz。<br>
<strong>psutil.getloadavg()</strong>：返回最近1、5、15分钟内的系统负载。<br>
<strong>psutil.pids()</strong>：返回当前运行的进程的pid。<br>
<strong>psutil.pid_exists(pid)</strong>：检查给定pid的进程是否存在。<br>
<strong>psutil.wait_procs(procs, timeout=None, callback=None)</strong>：Return a (gone, alive) tuple indicating which processes are gone and which ones are still alive。（此处未看懂）<br>
以下为pustil库中记录的异常：<br>
<strong>psutil.Error</strong>：基础异常对象，其他异常均继承自此异常。<br>
<strong>psutil.NoSuchProcess(pid, name=None, msg=None)</strong>：找不到给定pid的进程时引发的异常。<br>
<strong>psutil.AccessDenied(pid=None, name=None, msg=None)</strong>：由权限不足引发的异常。<br>
<strong>psutil.TimeoutExpired(seconds, pid=None, name=None, msg=None)</strong>：进程超时引发的异常。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正月随笔（一）]]></title>
        <id>https://bronzecraft.github.io/post/d5bvrYE3I/</id>
        <link href="https://bronzecraft.github.io/post/d5bvrYE3I/">
        </link>
        <updated>2021-02-27T12:12:19.000Z</updated>
        <content type="html"><![CDATA[<p>  昨日元宵节，不知不觉春节已经结束一周了，春节间看了贺岁片，《你好李焕英》。<br>
  科幻作家宝树说《李焕英》前半段很俗套，和《乘风破浪》差不多，最后的反转很巧妙，一下子升华了电影的主题。豆瓣有个评论“你以为你很爱父母，然而父母比你爱他们还爱你”，深以为写的极好。<br>
  回到过去在电影题材中已经不是新鲜的桥段，然而《李焕英》依旧拍出了新意。当你回到过去，你会不会选择去改变它？大多数电影的主人公都选择改变，毕竟人生不如意十之八九，后悔药难得。《回到未来》里主人公选择改变父亲年轻时的懦弱，帮助他对抗欺负他的恶霸，《人猿星球》里面对未来可能占领地球的猩猩，人类选择消灭猩猩，《终结者2》里未来人更是派人回来帮助博士以避免未来天网的诞生。然而做出改变的行为就改变未来，有时候反而会促使它发生，昭示着宿命论的存在。《人猿星球》里人类研究和消灭猩猩反而引发了灾难，走向了注定的未来。《信条》里主人公虽然逆时间回到过去，但没改变什么。甚至更早的希腊神话，俄狄浦斯，因弑父预言惨遭抛弃的他最终如同预言讲述的那样弑父娶母，也是一种宿命论。<br>
  这里说下两个电影，《时间旅行者的妻子》和《你好李焕英》。前者讲述了一个可以在时空随机穿越的男人，后者讲述了女儿回到过去，感觉自己平庸失败的人生不能给母亲更好的未来，选择改变母亲的人生让她有一个更好的子女。两个电影中的未来都没有改变，前者主人公在时空中随机穿越，一次次的试图改变自己父母的车祸，然而却一次又一次目睹它的发生，到最后主人公接受了这一切，选择在穿越回过去的时候尽可能的陪伴父母。书中有个比喻很好的描述了主人公的穿越行为，钟摆是一种围着最低点左右摆动的装置，无论它偏离中心点多远，最后都会摆回来，主人公的穿越的时间点就像钟摆一样围着父母出车祸的那一刻来回摆动。这个比喻很让我感慨，当人受了很大的创伤后记忆很容易围着创伤来回绕动，随着时间流逝你以为你已经接受的时候，它又突然把你拉回那段经历中。《李焕英》中女儿试图改变母亲的选择，却发现母亲依旧做出了同样的选择，女儿以为母亲不理解自己，最后才发现母亲也回到了过去，在明白未来人生经历的情况下依旧做出了同样的决定。<br>
  这个电影很催泪，不仅是勾起了大家的记忆，父母对子女的爱，而且还探讨了何为人生的幸福。我曾很多次幻想自己回到过去，改变自己以改变，譬如高中时勤奋一些，读研时不那么贪玩一些，或许就会考一个好点的大学。然而也有时会想假使自己真的改变了未来，那么自己现在很多的同学朋友都会消失，当然也会有新的朋友，这些感情还是很难舍得，心情也会很纠结。<br>
  唯一的勇敢是当你认清了这个世界的真相依然热爱它。忘了出自哪儿了，修改下作为本文的结语吧，唯一幸福的人生是当你经历的一切能够重新开始时依旧做出同样的选择。<br>
  （几个小时前看到新闻吴孟达去世了，心情沉重，那些熟悉的人终究要一个个离开了）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[春节假期随笔（一）]]></title>
        <id>https://bronzecraft.github.io/post/ZVy9CJA76/</id>
        <link href="https://bronzecraft.github.io/post/ZVy9CJA76/">
        </link>
        <updated>2021-02-11T15:23:31.000Z</updated>
        <content type="html"><![CDATA[<p>  今天是春节法定假日第一天，也是年三十，未能回家，内心赶不走的内疚。<br>
  晚上看了一部老电影，《落叶归根》，颇有感触。电影很好看，赵本山奉献了影帝级别的表演。故事据说是导演根据一位农民工的真实经历改编而成的，想起以前看的《山河故人》，贾樟柯也将一段真实情节化用进了自己的电影——一名僧人在太原火车站候车室超度突然去世的老人。<img src="https://bronzecraft.github.io/post-images/1613057514201.jpg" alt="" loading="lazy"><br>
  《落叶归根》的故事给人一种无奈而又坚持的感觉。抱着完成诺言的朴素想法坚持把工友的尸体送回老家，路上遇到了劫匪、小偷、黑店，被各种欺负，也遇到了情伤的卡车司机、独身一人的老人、正规发廊的打工妹、野外游荡的蜂农。被骗被欺负，也有被帮助，男主角最终把工友送到了老家，然而只剩下一片废墟 ——工友一家可能已经因为三峡水库蓄水搬到别的地方去了。“爸爸我们知道错了，我们找了你很久，我们搬家了，新家在湖北xxxx”，这段留言背后又有怎样的故事啊，令人唏嘘。<br>
  《山河故人》则给我另一种感受，电影像是一个记录者单纯记录时间的推进时代的变迁，女主成婚，离婚，而又老去。我没办法详细表达自己内心的感受。倪匡的卫斯理系列有一个故事是一对可以在时间中旅行的情侣拍摄了历史中曾经发生过的事——一名哥老会打手的人生，他的成长、努力和失败，然后把这段纪录片寄给了卫斯理。《山河故人》就给我这样的感觉，导演好像是单纯从历史中摘取了这样一个人的人生并把它展示出来。顺便说一句，影片中的《go west》插曲也曾被用在另一部电影《有话好好说》，一部喜剧，赵本山在里面出演了一个小角色——收废品的。拿着姜文给的喇叭喊出了那段经典台词：安红俺想你。<br>
  晚上从同学那边回来，看到小区里一名父亲在放小小的烟花，母亲抱着孩子在旁边观看，蛮温馨。想起过去在老家过年，那时还没有禁放烟花炮竹，小孩子们吃完晚饭到处放炮仗，这样的情景以后大抵是见不到了。<br>
  就这样吧，外边的炮声也响起来了，新年了！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[窗前随笔]]></title>
        <id>https://bronzecraft.github.io/post/si14YgKRg/</id>
        <link href="https://bronzecraft.github.io/post/si14YgKRg/">
        </link>
        <updated>2021-02-07T13:33:45.000Z</updated>
        <content type="html"><![CDATA[<p>  闲坐时收到一条系统短信，说明日降温注意保暖云云。想着前面与家里通话我说无锡今日很热而我妈说家里很冷，笑着说明日无锡开始降温，大抵是老家的冷空气跑到我这里了。看到这条短信又引发了一些回忆。<br>
  高中读书时学过一篇课文，余秋雨的《听听那冷雨》，里面提到作者客居台湾，已经二十余年未曾踏上大陆，在寒潮掠过大陆涌向台湾时感叹不能扑进她怀里，被她的裙边扫下也算是安慰孺慕之情。<br>
  今年疫情严重，各地政策变动不定，这个春节是确定回不去老家了。这还是这么大第一次在外地过春节，这几日颇有感触。虽说年味越来越淡，但春节团圆的象征意义依旧在，无法回去陪父母致使心情很是失落。今日被这条系统短信又一次勾起难言之情。我自然不像余先生这般多年未回家，但依然稍微体会到余先生的这种借气候变化抚慰内心思乡之情的心态。<br>
  故乡啊！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python实现多线程写入和读出]]></title>
        <id>https://bronzecraft.github.io/post/Xs9mZGFXm/</id>
        <link href="https://bronzecraft.github.io/post/Xs9mZGFXm/">
        </link>
        <updated>2021-02-06T14:12:04.000Z</updated>
        <content type="html"><![CDATA[<p>   一个简单例子。代码如下：</p>
<pre><code># -*- coding: utf-8 -*-

import threading
import time
import queue
import os
import subprocess

class sharefunc:
    '''
    shared function
    '''
    def __init__(self,initial_value=0):
        # self.value = intial_value
        self.data=initial_value
        self._value_lock = threading.Lock()
        self.tasklist = []
    
    def taskin(self,data):
        for i in range(data):
            with self._value_lock:
                self.tasklist.append(i)
            time.sleep(1)
    
    def taskini(self,data):
        for i in range(data):
            with self._value_lock:
                self.tasklist.append(i+20)
            time.sleep(0.5)
     
        
     
        
    def taskout(self):
        with self._value_lock:
            f = open(&quot;run.bat&quot;,&quot;w&quot;)
            x = self.tasklist[0]
            del self.tasklist[0]
            print ('out number:',x)
            print ('lenth oflist is :',len(self.tasklist))
            # f.write('del *.txt' +&quot;\n&quot;)
            f.write(&quot;ping -n 1 www.bing.com &gt; &quot;+str(x)+&quot;.txt&quot; +&quot;\n&quot;)
            f.write(&quot;ping -n &quot;+str(x)+&quot; www.bing.com &gt;&gt; &quot;+str(x)+&quot;.txt&quot;+&quot;\n&quot;)           
            f.close()
        # print(&quot;1ok&quot;)
        os.system(&quot;run.bat&quot;)
        # print(&quot;2ok&quot;)
        return x
test=[]
t = sharefunc()
t.taskin(2)
# print(t.tasklist[0])
# x = t.taskout()
# print(x)
print(len(t.tasklist))
t1 = threading.Thread(target=t.taskin,args=(9,))
t1.start()
t3 = threading.Thread(target=t.taskini,args=(9,))
t3.start()

# t1.join()
# for i in range(10):
#     print(t1.is_alive())
#     if (not t1.is_alive()):
#         t1 = threading.Thread(target=t.taskin,args=(i+2,))
#         t1.start()
#         print(&quot;t1: &quot;,i)

tx = 1
# for i in t.tasklist:
#     print (i)
while (tx==1):
    # print(&quot;t.taskin thread is &quot;,t1.is_alive())
    if (len(t.tasklist)&gt;0):
        t2 = threading.Thread(target=t.taskout,args=())
        t2.start()
        t2.join()
    if (not t1.is_alive()) and (len(t.tasklist)&lt;1) and(not t1.is_alive()):
        break
        

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于太空漫游四部曲]]></title>
        <id>https://bronzecraft.github.io/post/qt-aecOEz/</id>
        <link href="https://bronzecraft.github.io/post/qt-aecOEz/">
        </link>
        <updated>2021-01-31T12:47:21.000Z</updated>
        <content type="html"><![CDATA[<p>  阿瑟克拉克“太空漫游四部曲”里，我最喜欢第二部。第一部探讨了人类可能的过去以及或许的未来，外星文明接近于神这个概念，整部小说可能哲学上的意义更浓一些。而第二部更进一步揭露外星文明的一角，特别是鲍曼和弗洛伊德见面那段，印象深刻，（至今还记得大卫鲍曼利用浮动的灰尘捏出来的人像只有眼睛最清晰，性别特征基本没有），算是对人类的未来有更深的描述。其后点燃木星这个桥段对于彼时的我来说更显瑰丽与宏大，整部小说在我理解范围内展示了外星技术的高度。后两部外星文明逐渐走下神坛，特别是最后一部，已经从神变成了普通高技术外星文明了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tkinter库学习笔记（1）]]></title>
        <id>https://bronzecraft.github.io/post/a-U-9nWgO/</id>
        <link href="https://bronzecraft.github.io/post/a-U-9nWgO/">
        </link>
        <updated>2021-01-31T11:10:54.000Z</updated>
        <content type="html"><![CDATA[<p>  周末简单看了下Tkinter库的帮助文档，写了一个小程序，记录鼠标点击按钮的次数，代码如下：</p>
<pre><code>import tkinter as tk

top = tk.Tk()
n = 0
def ph():
    global n
    n = n + 1
    lab.configure(text =str(n) )
    return 0
butn =tk.Button(top,text = &quot;click&quot;,command=ph)
lab = tk.Label(top,text = str(n))
lab.pack()
butn.pack()
top.mainloop()
</code></pre>
<p>  原打算使用bind方法实现的，不过暂时没搞懂bind的用法，一直失败。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无题]]></title>
        <id>https://bronzecraft.github.io/post/O-4HYtF7e/</id>
        <link href="https://bronzecraft.github.io/post/O-4HYtF7e/">
        </link>
        <updated>2021-01-25T12:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>  惯于长夜过春时，挈妇将雏鬓有丝。<br>
  忍看朋辈成新鬼，怒向刀丛觅小诗。<br>
  梦里依稀慈母泪，城头变幻大王旗。<br>
  吟罢低眉无处写，月光如水照缁衣。</p>
<p>  记得之前在网上看过一段文字，说工具发明的年代判定差别几十年是常有的事，假使几百年后有人写下“今早鲁迅起来，略觉胸闷，拿出手机看到一条新信息：先生，柔石他们遇难了....<br>
晚上鲁迅打开电脑敲下：忍看朋辈成新鬼，怒向刀丛觅小诗”这样的文章也不足为奇。<br>
  哎，深觉有趣，不知百年后别人如何描述我们这个时代，又不知我们描述的百年前时代究竟是什么模样啊。</p>
]]></content>
    </entry>
</feed>