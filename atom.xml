<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bronzecraft.github.io</id>
    <title>迷藏</title>
    <updated>2021-01-19T15:00:07.634Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bronzecraft.github.io"/>
    <link rel="self" href="https://bronzecraft.github.io/atom.xml"/>
    <subtitle>宇宙尽头的餐馆门口的保安</subtitle>
    <logo>https://bronzecraft.github.io/images/avatar.png</logo>
    <icon>https://bronzecraft.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 迷藏</rights>
    <entry>
        <title type="html"><![CDATA[Nastran Dmap学习笔记（1）]]></title>
        <id>https://bronzecraft.github.io/post/pO8G2S8TD/</id>
        <link href="https://bronzecraft.github.io/post/pO8G2S8TD/">
        </link>
        <updated>2021-01-19T11:53:08.000Z</updated>
        <content type="html"><![CDATA[<p>一个小例子：</p>
<pre><code>       sol hw
       compile hw
       subdmap hw
       message //' hello world '$
       end
       cend
       begin bulk
       enddata
</code></pre>
<p>.f06文件里可以看到输出&quot;HELLO WORLD &quot;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MSC.Marc求解器简单比较]]></title>
        <id>https://bronzecraft.github.io/post/2soV52Ss7/</id>
        <link href="https://bronzecraft.github.io/post/2soV52Ss7/">
        </link>
        <updated>2021-01-18T13:07:09.000Z</updated>
        <content type="html"><![CDATA[<p>  对Marc求解器算例验证最全的应该是自带帮助文档Vol E的2.79，不过那是基于linear analysis。本文试着拿非线性接触问题简单比较下Marc的求解器，验证一些想法。<br>
  本示例开启了Stress Assembly and Recovery并行和Matrix solver并行，模型中1024个壳单元，240个实体单元。<br>
  采用Multifrontal Sparse Solver，求解过程中最大内存使用为184M。求解时间信息如下：</p>
<pre><code>         timing information:                             wall time      cpu time

           total time for input:                              0.10          0.09
           total time for stiffness matrix assembly:         43.65         86.67
           total time for mass matrix assembly:               0.00          0.00
           total time for stress recovery:                   16.02         31.81
           total time for matrix solution:                   41.01         82.44
           total time for contact:                            0.45          0.72
           total time for output:                             0.23          0.53
           total time for miscellaneous:                     14.96          9.73
           ---------------------------------------------------------------------
           total time:                                      116.42        212.00


         multi-threading overheads:                      wall time      cpu time

           total time for multi-threading:                    0.27          0.22
           (note that this time is also counted
            in other sections)
</code></pre>
<p>  下面是相同模型相同并行设置，采用Pardiso Direct Sparse Solver，求解过程最大使用内存为196M。花费的时间信息如下：</p>
<pre><code>         timing information:                             wall time      cpu time

           total time for input:                              0.09          0.08
           total time for stiffness matrix assembly:         42.18         84.34
           total time for mass matrix assembly:               0.00          0.00
           total time for stress recovery:                   15.87         31.92
           total time for matrix solution:                   53.81        104.97
           total time for contact:                            0.42          1.16
           total time for output:                             0.32          0.62
           total time for miscellaneous:                     18.94         10.91
           ---------------------------------------------------------------------
           total time:                                      131.64        234.00


         multi-threading overheads:                      wall time      cpu time

           total time for multi-threading:                    0.25          0.62
           (note that this time is also counted
            in other sections)
</code></pre>
<p>  相同模型更改为Mumps direct solver，求解过程中最大使用内存为188M，求解时间信息如下：</p>
<pre><code>              timing information:                             wall time      cpu time

           total time for input:                              0.09          0.09
           total time for stiffness matrix assembly:         41.42         81.44
           total time for mass matrix assembly:               0.00          0.00
           total time for stress recovery:                   15.71         31.41
           total time for matrix solution:                   41.92         83.59
           total time for contact:                            0.43          0.91
           total time for output:                             0.29          0.64
           total time for miscellaneous:                     13.47          9.58
           ---------------------------------------------------------------------
           total time:                                      113.33        207.66


         multi-threading overheads:                      wall time      cpu time

           total time for multi-threading:                    0.23          0.64
           (note that this time is also counted
            in other sections)
</code></pre>
<p>  更改成CASI Iterative solver再试算下，最大使用内存为256M，*（不科学，迭代求解器怎么会比直接求解器内存耗费更大，回头我再检查下模型）*求解时间信息如下：</p>
<pre><code>            [本示例中因个人电脑原因最后卡住一段时间导致杂项时间过多，实际应用时间约236.72s]
            timing information:                             wall time      cpu time

           total time for input:                              0.09          0.09
           total time for stiffness matrix assembly:         43.57         87.00
           total time for mass matrix assembly:               0.00          0.00
           total time for stress recovery:                   16.32         32.23
           total time for matrix solution:                  168.21        286.58
           total time for contact:                            0.46          0.91
           total time for output:                             0.30          0.59
           total time for miscellaneous:                    157.01         10.33
           ---------------------------------------------------------------------
           total time:                                      385.95        417.73


         multi-threading overheads:                      wall time      cpu time

           total time for multi-threading:                    0.25          0.34
           (note that this time is also counted
            in other sections)
</code></pre>
<p>  最后采用Multifrontal Sparse Solver，同样设置，只不过Matrix fil Optimization更改为internal，即采用软件自己的矩阵带宽优化功能，最大使用内存为182M。*（我以为Metis会优化带宽减少内存使用量来着）*时间信息如下：（杂项时间过多原因同上）</p>
<pre><code>         timing information:                             wall time      cpu time

           total time for input:                              0.09          0.08
           total time for stiffness matrix assembly:         43.41         86.58
           total time for mass matrix assembly:               0.00          0.00
           total time for stress recovery:                   16.63         33.53
           total time for matrix solution:                   37.38         72.73
           total time for contact:                            0.47          1.12
           total time for output:                             0.28          0.30
           total time for miscellaneous:                    156.75         11.03
           ---------------------------------------------------------------------
           total time:                                      255.01        205.38


         multi-threading overheads:                      wall time      cpu time

           total time for multi-threading:                    0.23          0.30
           (note that this time is also counted
            in other sections)
</code></pre>
<p>  哪天有空开DDM再试算下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://bronzecraft.github.io/post/kxBbXLIIs/</id>
        <link href="https://bronzecraft.github.io/post/kxBbXLIIs/">
        </link>
        <updated>2021-01-14T14:40:03.000Z</updated>
        <content type="html"><![CDATA[<p>本站是一个记录本人随思随想的小角落，嗯....<s>（即便是身处果壳之中也自以为是宇宙之王，并不是）</s><br>
本人只是一个保安 <s>（宇宙尽头的餐馆门口的保安，也太中二了）</s><br>
本人喜欢科幻，历史，机械，编程，徒步，骑行...兴趣较多然而并没有什么深入且擅长的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[热寂脑洞]]></title>
        <id>https://bronzecraft.github.io/post/eKrKUSyd0/</id>
        <link href="https://bronzecraft.github.io/post/eKrKUSyd0/">
        </link>
        <updated>2021-01-14T14:29:45.000Z</updated>
        <content type="html"><![CDATA[<p>这是很久以前就有的脑洞，宇宙或许早就进入了热寂。涨落无处不在，而我们刚好在一个低熵的宇宙洼地，随着时间流逝迎来最后的消亡。<br>
而后又有更进一步脑洞，假定宇宙中有无数的低熵洼地，终归有生命能在熵回升前逃离洼地。<br>
一艘载着流亡者的帆船航行在熵之海上，不停的寻找洼地延续自身，旅途中会遇到各种各样的生命和种群。<br>
再进一步，或许有更多的洼地在消亡前发展到能简单对抗熵回升的趋势，它们派出探索飞船，去探索，去转移，去搜集资源。<br>
再再进一步，有一艘飞船或者洼地认为这样苟延残喘没有意义，决议牺牲自己，点燃宇宙，让熵海沸腾，最后创造一个新宇宙，继而希望宇宙能诞生出永存的生命。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello world]]></title>
        <id>https://bronzecraft.github.io/post/R6szcXDYA/</id>
        <link href="https://bronzecraft.github.io/post/R6szcXDYA/">
        </link>
        <updated>2021-01-14T14:11:56.000Z</updated>
        <content type="html"><![CDATA[<p>折腾了许久，终于将Gridea和Github同步成功不更新的问题解决了。<br>
记录开始！</p>
]]></content>
    </entry>
</feed>